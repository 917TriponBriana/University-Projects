class Repository:
    def __init__(self, file_name):
        self.__file_name = file_name
        self.sentence_list = list()
        self.load_file()

    def load_file(self):
        file = open(self.__file_name, 'rt')
        for line in file.readlines():
            line = line.removesuffix("\n")
            self.sentence_list.append(line)
        file.close()

    def save_file(self):
        file = open(self.__file_name, 'wt')
        for sentence in self.sentence_list:
            sentence += "\n"
            file.write(sentence)
        file.close()

    def add_sentence(self, sentence_to_add):
        self.sentence_list.append(sentence_to_add)
        self.save_file()

-----------------------
class Controller:
    def __init__(self, repository):
        self.__repository = repository

    def add_sentence(self, new_sentence):
        """
        the function checks if the new sentence has at least 1 word and if the new sentence is unique
        after that verifies each words length to be at least 3
        :param new_sentence: the sentence that needs to be add
        """
        new_sentence = new_sentence.strip()
        if not new_sentence:
            raise ControllerException("The sentence must contain at least 1 word!")
        if new_sentence in self.__repository.sentence_list:
            raise ControllerException("The sentence is already in the list of sentences!")
        list_of_characters = list(new_sentence)
        word_length = 0
        for i in range(len(list_of_characters)):
            if list_of_characters[i] != ' ':
                word_length += 1
            else:
                if word_length < 3:
                    raise ControllerException("Each word must have at least 3 letters!")
                word_length = 0
        self.__repository.add_sentence(new_sentence)
--------------------------
class Tests(unittest.TestCase):
    def setUp(self) -> None:
        self.__repository = Repository("test_file.txt")
        self.__controller = Controller(self.__repository)

    def test_add_sentence(self):
        self.__controller.add_sentence("Marra are mere")
        self.assertEqual(len(self.__repository.sentence_list), 6)
        print(self.__repository.sentence_list)
        with self.assertEqual(ControllerException):
            self.__controller.add_sentence("Mara are mere")
        with self.assertEqual(ControllerException):
            self.__controller.add_sentence("Eu si el mergem la mare")
-----------------------------
class UI:
    def __init__(self):
        self.repository = Repository("sentences")
        self.controller = Controller(self.repository)

    def start(self):
        while True:
            self.print_menu()
            option = input("Enter option: ").strip()
            if option == '1':
                new_sentence = input("Enter a new sentence you'd like to add: ")
                try:
                    self.controller.add_sentence(new_sentence)
                except ControllerException as e:
                    print(str(e))
            elif option == '2':
                self.hangman_game()
            elif option == '0':
                return
            else:
                print("Option does not exist!")

    def hangman_game(self):
        sentence_to_guess = random.choice(self.repository.sentence_list)
        letter_list_sentence_to_guess = list(sentence_to_guess)
        letters_to_print = []
        letters_to_print.append(letter_list_sentence_to_guess[0].lower())
        letters_to_print.append(" ")
        letters_to_print.append(letter_list_sentence_to_guess[-1].lower())
        for i in range(len(letter_list_sentence_to_guess)):
            if letter_list_sentence_to_guess[i] == " ":
                letters_to_print.append(letter_list_sentence_to_guess[i-1].lower())
                letters_to_print.append(letter_list_sentence_to_guess[i+1].lower())
        hangman_word = "hangman"
        hangman_letters = list(hangman_word)
        hangman_index = -1
        hangman_string = ""
        print(self.create_string_to_print(letter_list_sentence_to_guess, letters_to_print) + " - " + hangman_string)
        while True:
            letter_guessed = input("Enter guess: ")
            letter_guessed = letter_guessed.strip().lower()
            if (letter_guessed in letter_list_sentence_to_guess or letter_guessed.upper() in letter_list_sentence_to_guess) and letter_guessed not in letters_to_print:
                letters_to_print += letter_guessed
                print(self.create_string_to_print(letter_list_sentence_to_guess, letters_to_print) + " - " + hangman_string)
                if self.create_string_to_print(letter_list_sentence_to_guess, letters_to_print) == sentence_to_guess:
                    print("You Won! :)")
                    return
            else:
                hangman_index += 1
                hangman_string += hangman_letters[hangman_index]
                print(self.create_string_to_print(letter_list_sentence_to_guess, letters_to_print) + " - " + hangman_string)
                if hangman_string == hangman_word:
                    print("You Lost! :(")
                    return

    @staticmethod
    def create_string_to_print(letter_list_sentence_to_guess, letters_to_print):
        string_to_print = ""
        for i in range(len(letter_list_sentence_to_guess)):
            if letter_list_sentence_to_guess[i].lower() in letters_to_print:
                string_to_print += letter_list_sentence_to_guess[i]
            else:
                string_to_print += " _ "
        return string_to_print

    @staticmethod
    def print_menu():
        print("1. Add a new sentence")
        print("2. Play game")
        print("0. Exit")


ui = UI()
ui.start()